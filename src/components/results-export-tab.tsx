"use client"

import { useState, useRef } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  Download, 
  Share2, 
  FileText, 
  Image as ImageIcon,
  Copy,
  Check,
  ExternalLink
} from 'lucide-react';
import { TestResult } from '@/types';
import { useToast } from '@/components/ui/use-toast';

interface ResultsExportTabProps {
  result: TestResult;
  cognitiveProfile: any;
  securityReport: any;
}

export function ResultsExportTab({ 
  result, 
  cognitiveProfile,
  securityReport 
}: ResultsExportTabProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [shareUrl, setShareUrl] = useState('');
  const [copied, setCopied] = useState(false);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const { toast } = useToast();

  const generateShareUrl = () => {
    const baseUrl = window.location.origin;
    return `${baseUrl}/ket-qua?score=${result.estimatedIQ}&accuracy=${result.accuracy?.toFixed(1) || 'N/A'}`;
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      toast({
        title: "Copied!",
        description: "Results link copied to clipboard",
        duration: 2000,
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      toast({
        title: "Error",
        description: "Failed to copy to clipboard",
        variant: "destructive",
      });
    }
  };

  const generateImage = async () => {
    if (!canvasRef.current) return;

    setIsGenerating(true);
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Set canvas size
    canvas.width = 1200;
    canvas.height = 800;

    // Background
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Header
    ctx.fillStyle = '#1f2937';
    ctx.font = 'bold 48px Arial';
    ctx.fillText('IQ Test Results', 50, 80);

    // Score
    ctx.fillStyle = '#059669';
    ctx.font = 'bold 72px Arial';
    ctx.fillText(`${result.estimatedIQ}`, 50, 180);

    ctx.fillStyle = '#6b7280';
    ctx.font = '24px Arial';
    ctx.fillText('Estimated IQ Score', 50, 220);

    // Accuracy
    ctx.fillStyle = '#3b82f6';
    ctx.font = 'bold 36px Arial';
    ctx.fillText(`${result.accuracy?.toFixed(1) || 'N/A'}%`, 50, 280);
    ctx.fillStyle = '#6b7280';
    ctx.font = '20px Arial';
    ctx.fillText('Accuracy', 50, 310);

    // Response Time
    ctx.fillStyle = '#7c3aed';
    ctx.font = 'bold 36px Arial';
    ctx.fillText(`${(result.averageResponseTime / 1000)?.toFixed(1) || 'N/A'}s`, 50, 380);
    ctx.fillStyle = '#6b7280';
    ctx.font = '20px Arial';
    ctx.fillText('Avg Response Time', 50, 410);

    // Domain Scores
    const domains = [
      { name: 'Pattern Recognition', score: cognitiveProfile?.patternRecognition || 0 },
      { name: 'Spatial Reasoning', score: cognitiveProfile?.spatialReasoning || 0 },
      { name: 'Logical Deduction', score: cognitiveProfile?.logicalDeduction || 0 },
      { name: 'Numerical Reasoning', score: cognitiveProfile?.numericalReasoning || 0 },
      { name: 'Short-term Memory', score: cognitiveProfile?.shortTermMemory || 0 }
    ];

    ctx.fillStyle = '#1f2937';
    ctx.font = 'bold 32px Arial';
    ctx.fillText('Cognitive Domain Scores', 50, 480);

    domains.forEach((domain, index) => {
      const y = 520 + (index * 50);
      ctx.fillStyle = '#374151';
      ctx.font = '20px Arial';
      ctx.fillText(domain.name, 50, y);
      ctx.fillStyle = '#059669';
      ctx.font = 'bold 24px Arial';
      ctx.fillText(`${domain.score?.toFixed(1) || 'N/A'}%`, 400, y);
    });

    // Footer
    ctx.fillStyle = '#9ca3af';
    ctx.font = '16px Arial';
    ctx.fillText('Generated by IQ Test System', 50, canvas.height - 30);

    try {
      const blob = await new Promise<Blob>((resolve) => {
        canvas.toBlob((blob) => {
          if (blob) resolve(blob);
        }, 'image/png');
      });

      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `iq-test-results-${Date.now()}.png`;
      link.click();
      URL.revokeObjectURL(url);

      toast({
        title: "Success!",
        description: "Results image downloaded",
        duration: 3000,
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate image",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const exportToPDF = () => {
    // This would require a PDF library like jsPDF
    toast({
      title: "Coming Soon",
      description: "PDF export will be available soon",
      duration: 3000,
    });
  };

  const shareResults = () => {
    const url = generateShareUrl();
    setShareUrl(url);
    
    if (navigator.share) {
      navigator.share({
        title: 'My IQ Test Results',
        text: `I scored ${result.estimatedIQ} on the IQ test with ${result.accuracy?.toFixed(1) || 'N/A'}% accuracy!`,
        url: url,
      });
    } else {
      copyToClipboard(url);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: -20 }}
      className="space-y-6"
    >
      {/* Export Options */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-6 text-center">
            <ImageIcon className="w-12 h-12 mx-auto mb-4 text-blue-500" />
            <h3 className="font-semibold mb-2">Export as Image</h3>
            <p className="text-sm text-muted-foreground mb-4">
              Download your results as a high-quality image
            </p>
            <Button 
              onClick={generateImage} 
              disabled={isGenerating}
              className="w-full"
            >
              {isGenerating ? (
                <div className="flex items-center space-x-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>Generating...</span>
                </div>
              ) : (
                <>
                  <Download className="w-4 h-4 mr-2" />
                  Download Image
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6 text-center">
            <FileText className="w-12 h-12 mx-auto mb-4 text-green-500" />
            <h3 className="font-semibold mb-2">Export as PDF</h3>
            <p className="text-sm text-muted-foreground mb-4">
              Get a detailed PDF report of your results
            </p>
            <Button onClick={exportToPDF} className="w-full">
              <Download className="w-4 h-4 mr-2" />
              Download PDF
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6 text-center">
            <Share2 className="w-12 h-12 mx-auto mb-4 text-purple-500" />
            <h3 className="font-semibold mb-2">Share Results</h3>
            <p className="text-sm text-muted-foreground mb-4">
              Share your results with friends and family
            </p>
            <Button onClick={shareResults} className="w-full">
              <Share2 className="w-4 h-4 mr-2" />
              Share
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Share URL */}
      {shareUrl && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <ExternalLink className="w-5 h-5" />
              <span>Share Link</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-2">
              <input
                type="text"
                value={shareUrl}
                readOnly
                className="flex-1 p-2 border rounded-md bg-muted"
              />
              <Button
                onClick={() => copyToClipboard(shareUrl)}
                variant="outline"
                size="sm"
              >
                {copied ? (
                  <Check className="w-4 h-4" />
                ) : (
                  <Copy className="w-4 h-4" />
                )}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Hidden Canvas for Image Generation */}
      <canvas
        ref={canvasRef}
        style={{ display: 'none' }}
      />

      {/* Results Summary for Export */}
      <Card>
        <CardHeader>
          <CardTitle>Results Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-semibold mb-3">Test Statistics</h4>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Total Questions:</span>
                  <span className="font-semibold">{result.totalQuestions}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Correct Answers:</span>
                  <span className="font-semibold">{result.correctAnswers}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Completion Time:</span>
                  <span className="font-semibold">{Math.round(result.completionTime / 60)}m {Math.round(result.completionTime % 60)}s</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Questions per Minute:</span>
                  <span className="font-semibold">{(result.totalQuestions / (result.completionTime / 60)).toFixed(1)}</span>
                </div>
              </div>
            </div>
            
            <div>
              <h4 className="font-semibold mb-3">Quality Metrics</h4>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Cronbach's Alpha:</span>
                  <span className="font-semibold">{result.cronbachAlpha?.toFixed(3) || 'N/A'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Test Reliability:</span>
                  <span className="font-semibold">{result.testReliability?.toFixed(3) || 'N/A'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Measurement Precision:</span>
                  <span className="font-semibold">{result.measurementPrecision?.toFixed(2) || 'N/A'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Final θ (Theta):</span>
                  <span className="font-semibold">{result.finalAbilityEstimate?.toFixed(3) || 'N/A'}</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
} 